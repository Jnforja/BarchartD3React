{"version":3,"sources":["D3Chart.js","ChartWrapper.js","GenderDropdown.js","App.js","serviceWorker.js","index.js"],"names":["MARGIN","top","bottom","left","right","WIDTH","HEIGHT","D3Chart","element","vis","this","svg","d3","append","attr","xLabel","text","xAxisGroup","yAxisGroup","Promise","all","then","dataset","men","women","menData","womenData","update","gender","data","y","domain","d","height","range","x","map","name","padding","transition","duration","call","rects","selectAll","exit","remove","bandwidth","enter","ChartWrapper","useState","chart","setChart","chartRef","useCallback","useEffect","ref","GenderDropdown","genderSelected","Toggle","variant","id","Menu","Item","onSelect","App","state","setState","className","bg","Brand","xs","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wVAEMA,EAAS,CAAEC,IAAK,GAAIC,OAAQ,GAAIC,KAAM,GAAIC,MAAO,IACjDC,EAAQ,IACRC,EAAS,IAEMC,E,WACnB,WAAYC,GAAU,oBACpB,IAAMC,EAAMC,KAEZD,EAAIE,IAAMC,IACAJ,GACPK,OAAO,OACPC,KAAK,QAAST,EAAQL,EAAOG,KAAOH,EAAOI,OAC3CU,KAAK,SAAUR,EAASN,EAAOC,IAAMD,EAAOE,QAC5CW,OAAO,KACPC,KAAK,YANE,oBAMwBd,EAAOG,KAN/B,YAMuCH,EAAOC,IAN9C,MAQVQ,EAAIM,OAASN,EAAIE,IACdE,OAAO,QACPC,KAAK,IAAKT,EAAQ,GAClBS,KAAK,IAAKR,EAAS,IACnBQ,KAAK,cAAe,UAEvBL,EAAIE,IACDE,OAAO,QACPC,KAAK,KAAOR,EAAS,GACrBQ,KAAK,KAAM,IACXA,KAAK,cAAe,UACpBE,KALH,gBAMGF,KAAK,YAAa,eAErBL,EAAIQ,WAAaR,EAAIE,IAClBE,OAAO,KACPC,KAAK,YAFS,sBAEmBR,EAFnB,MAIjBG,EAAIS,WAAaT,EAAIE,IAAIE,OAAO,KAEhCM,QAAQC,IAAI,CACVR,IAAQ,0DACRA,IAAQ,8DACPS,MAAK,SAAAC,GAAY,IAAD,cACIA,EADJ,GACVC,EADU,KACLC,EADK,KAEjBf,EAAIgB,QAAUF,EACdd,EAAIiB,UAAYF,EAChBf,EAAIkB,OAAO,U,mDAIRC,GACL,IAAMnB,EAAMC,KACZD,EAAIoB,KAAkB,QAAXD,EAAmBnB,EAAIgB,QAAUhB,EAAIiB,UAChDjB,EAAIM,OAAOC,KAAX,8BAAuCY,IAEvC,IAAME,EAAIlB,MAEPmB,OAAO,CAC4B,IAAlCnB,IAAOH,EAAIoB,MAAM,SAAAG,GAAC,OAAIA,EAAEC,UACxBrB,IAAOH,EAAIoB,MAAM,SAAAG,GAAC,OAAIA,EAAEC,YAEzBC,MAAM,CAAC5B,EAAQ,IAEZ6B,EAAIvB,MAEPmB,OAAOtB,EAAIoB,KAAKO,KAAI,SAAAJ,GAAC,OAAIA,EAAEK,SAC3BH,MAAM,CAAC,EAAG7B,IACViC,QAAQ,IAEX7B,EAAIQ,WACDsB,aACAC,SAAS,KACTC,KAAK7B,IAAcuB,IACtB1B,EAAIS,WACDqB,aACAC,SAAS,KACTC,KAAK7B,IAAYkB,IAGpB,IAAMY,EAAQjC,EAAIE,IAAIgC,UAAU,QAAQd,KAAKpB,EAAIoB,MAGjDa,EACGE,OACAL,aACAC,SAAS,KACT1B,KAAK,IAAKR,GACVQ,KAAK,SAAU,GACf+B,SAGHH,EACGH,aACAC,SAAS,KACT1B,KAAK,KAAK,SAAAkB,GAAC,OAAIG,EAAEH,EAAEK,SACnBvB,KAAK,KAAK,SAAAkB,GAAC,OAAIF,EAAEE,EAAEC,WACnBnB,KAAK,QAASqB,EAAEW,WAChBhC,KAAK,UAAU,SAAAkB,GAAC,OAAI1B,EAASwB,EAAEE,EAAEC,WAGpCS,EACGK,QACAlC,OAAO,QACPC,KAAK,KAAK,SAAAkB,GAAC,OAAIG,EAAEH,EAAEK,SACnBvB,KAAK,QAASqB,EAAEW,WAChBhC,KAAK,IAAKR,GACVQ,KAAK,OAAQ,QACbyB,aACAC,SAAS,KACT1B,KAAK,KAAK,SAAAkB,GAAC,OAAIF,EAAEE,EAAEC,WACnBnB,KAAK,UAAU,SAAAkB,GAAC,OAAI1B,EAASwB,EAAEE,EAAEC,e,KCzFzBe,MAjBf,YAAmC,IAAXpB,EAAU,EAAVA,OAAU,EACNqB,mBAAS,MADH,mBACzBC,EADyB,KAClBC,EADkB,KAE1BC,EAAWC,uBAAY,SAAA7C,GACX,OAAZA,GACF2C,EAAS,IAAI5C,EAAQC,MAEtB,IAQH,OANA8C,qBAAU,WACM,OAAVJ,GACFA,EAAMvB,OAAOC,KAEd,CAACA,IAEG,yBAAK2B,IAAKH,K,iBCdJ,SAASI,EAAT,GAA6C,IAAnBC,EAAkB,EAAlBA,eACvC,OACE,kBAAC,IAAD,KACE,kBAAC,IAASC,OAAV,CAAiBC,QAAQ,UAAUC,GAAG,kBAAtC,wBAIA,kBAAC,IAASC,KAAV,KACE,kBAAC,IAASC,KAAV,CAAeC,SAAU,kBAAMN,EAAe,SAA9C,OAGA,kBAAC,IAASK,KAAV,CAAeC,SAAU,kBAAMN,EAAe,WAA9C,W,ICwBOO,E,2MA7BbC,MAAQ,CACNrC,OAAQ,O,EAGV6B,eAAiB,SAAA7B,GAAM,OAAI,EAAKsC,SAAS,CAAEtC,Y,wEAGzC,OACE,yBAAKuC,UAAU,OACb,kBAAC,IAAD,CAAQC,GAAG,SACT,kBAAC,IAAOC,MAAR,oBAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,GAAI,IACP,kBAACd,EAAD,CAAgBC,eAAgB/C,KAAK+C,mBAGzC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKa,GAAI,IACP,kBAAC,EAAD,CAAc1C,OAAQlB,KAAKuD,MAAMrC,iB,GArB7B2C,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9D,MAAK,SAAA+D,GACjCA,EAAaC,kB","file":"static/js/main.ba197f26.chunk.js","sourcesContent":["import * as d3 from 'd3';\r\n\r\nconst MARGIN = { top: 10, bottom: 50, left: 70, right: 10 };\r\nconst WIDTH = 800;\r\nconst HEIGHT = 500;\r\n\r\nexport default class D3Chart {\r\n  constructor(element) {\r\n    const vis = this;\r\n\r\n    vis.svg = d3\r\n      .select(element)\r\n      .append('svg')\r\n      .attr('width', WIDTH + MARGIN.left + MARGIN.right)\r\n      .attr('height', HEIGHT + MARGIN.top + MARGIN.bottom)\r\n      .append('g')\r\n      .attr('transform', `translate(${MARGIN.left},${MARGIN.top})`);\r\n\r\n    vis.xLabel = vis.svg\r\n      .append('text')\r\n      .attr('x', WIDTH / 2)\r\n      .attr('y', HEIGHT + 50)\r\n      .attr('text-anchor', 'middle');\r\n\r\n    vis.svg\r\n      .append('text')\r\n      .attr('x', -(HEIGHT / 2))\r\n      .attr('y', -40)\r\n      .attr('text-anchor', 'middle')\r\n      .text(`Height in cm`)\r\n      .attr('transform', 'rotate(-90)');\r\n\r\n    vis.xAxisGroup = vis.svg\r\n      .append('g')\r\n      .attr('transform', `translate(0,${HEIGHT})`);\r\n\r\n    vis.yAxisGroup = vis.svg.append('g');\r\n\r\n    Promise.all([\r\n      d3.json('https://udemy-react-d3.firebaseio.com/tallest_men.json'),\r\n      d3.json('https://udemy-react-d3.firebaseio.com/tallest_women.json')\r\n    ]).then(dataset => {\r\n      const [men, women] = dataset;\r\n      vis.menData = men;\r\n      vis.womenData = women;\r\n      vis.update('men');\r\n    });\r\n  }\r\n\r\n  update(gender) {\r\n    const vis = this;\r\n    vis.data = gender === 'men' ? vis.menData : vis.womenData;\r\n    vis.xLabel.text(`The world's tallest ${gender}`);\r\n\r\n    const y = d3\r\n      .scaleLinear()\r\n      .domain([\r\n        d3.min(vis.data, d => d.height) * 0.95,\r\n        d3.max(vis.data, d => d.height)\r\n      ])\r\n      .range([HEIGHT, 0]);\r\n\r\n    const x = d3\r\n      .scaleBand()\r\n      .domain(vis.data.map(d => d.name))\r\n      .range([0, WIDTH])\r\n      .padding(0.4);\r\n\r\n    vis.xAxisGroup\r\n      .transition()\r\n      .duration(500)\r\n      .call(d3.axisBottom(x));\r\n    vis.yAxisGroup\r\n      .transition()\r\n      .duration(500)\r\n      .call(d3.axisLeft(y));\r\n\r\n    // DATA JOIN\r\n    const rects = vis.svg.selectAll('rect').data(vis.data);\r\n\r\n    // EXIT\r\n    rects\r\n      .exit()\r\n      .transition()\r\n      .duration(500)\r\n      .attr('y', HEIGHT)\r\n      .attr('height', 0)\r\n      .remove();\r\n\r\n    // UPDATE\r\n    rects\r\n      .transition()\r\n      .duration(500)\r\n      .attr('x', d => x(d.name))\r\n      .attr('y', d => y(d.height))\r\n      .attr('width', x.bandwidth)\r\n      .attr('height', d => HEIGHT - y(d.height));\r\n\r\n    // ENTER\r\n    rects\r\n      .enter()\r\n      .append('rect')\r\n      .attr('x', d => x(d.name))\r\n      .attr('width', x.bandwidth)\r\n      .attr('y', HEIGHT)\r\n      .attr('fill', 'grey')\r\n      .transition()\r\n      .duration(500)\r\n      .attr('y', d => y(d.height))\r\n      .attr('height', d => HEIGHT - y(d.height));\r\n  }\r\n}\r\n","import React, { useCallback, useState, useEffect } from 'react';\r\nimport D3Chart from './D3Chart';\r\n\r\nfunction ChartWrapper({ gender }) {\r\n  const [chart, setChart] = useState(null);\r\n  const chartRef = useCallback(element => {\r\n    if (element !== null) {\r\n      setChart(new D3Chart(element));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (chart !== null) {\r\n      chart.update(gender);\r\n    }\r\n  }, [gender]);\r\n\r\n  return <div ref={chartRef} />;\r\n}\r\n\r\nexport default ChartWrapper;\r\n","import React from 'react';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nexport default function GenderDropdown({ genderSelected }) {\r\n  return (\r\n    <Dropdown>\r\n      <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n        Please select gender\r\n      </Dropdown.Toggle>\r\n\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onSelect={() => genderSelected('men')}>\r\n          Men\r\n        </Dropdown.Item>\r\n        <Dropdown.Item onSelect={() => genderSelected('women')}>\r\n          Women\r\n        </Dropdown.Item>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ChartWrapper from './ChartWrapper';\nimport GenderDropdown from './GenderDropdown';\n\nclass App extends Component {\n  state = {\n    gender: 'men'\n  };\n\n  genderSelected = gender => this.setState({ gender });\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar bg=\"light\">\n          <Navbar.Brand>Barchartly</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            <Col xs={12}>\n              <GenderDropdown genderSelected={this.genderSelected} />\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={12}>\n              <ChartWrapper gender={this.state.gender} />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}